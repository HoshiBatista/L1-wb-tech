version: "2"

# Общие параметры запуска самого линтера.
run:
  # Максимальное время, которое дается линтеру на проверку всего проекта.
  # Если проверка длится дольше 5 минут, она будет принудительно остановлена.
  # Это защищает от "зависания" на очень больших или сложных файлах.
  timeout: 5m

# Управление тем, как обрабатываются найденные проблемы (ошибки).
issues:
  # Если в коде найдется 100 одинаковых ошибок (например, неиспользуемая переменная),
  # в отчете будут показаны только первые 50. Это защита от "заспамливания" вывода.
  max-same-issues: 50

  # Правила-исключения, которые позволяют игнорировать определенные ошибки.
  exclude-rules:
    # Правило для файлов, заканчивающихся на _test.go (тестовые файлы).
    - path: _test\.go
      # Для этих файлов мы отключаем некоторые линтеры, потому что в тестах
      # часто пишут более длинные функции или намеренно игнорируют ошибки.
      linters:
        - bodyclose
        - dupl
        - errcheck
        - funlen
        - goconst
        - noctx

# Инструменты, которые ИСПРАВЛЯЮТ код (используются при запуске с флагом `--fix`).
formatters:
  # Включаем два форматера:
  enable:
    # goimports: форматирует код (как gofmt) и автоматически управляет импортами
    # (добавляет, удаляет, сортирует).
    - goimports
    # golines: автоматически переносит слишком длинные строки кода на новые,
    # делая код более читаемым.
    - golines
    # gofmt: форматирование
    - gofmt
  
  # Настройки для конкретных форматеров.
  settings:
    goimports:
      # Очень важная настройка. Говорит goimports, что все пакеты,
      # начинающиеся с "l0-wb-tech", являются внутренними пакетами нашего проекта.
      # Это позволяет ему правильно группировать импорты.
      local-prefixes:
        - l0-wb-tech
    golines:
      # Устанавливает максимальную длину строки в 120 символов.
      max-len: 120

# "Сердце" конфигурации. Указываем, какие именно анализаторы кода (линтеры) будут запускаться.
linters:
  # Лучшая практика: сначала отключаем абсолютно все линтеры.
  disable-all: true
  # А затем явно включаем только те, которые нам нужны.
  enable:
    - asasalint       # Проверяет, что срезы не передаются как `any` в variadic-функции.
    - asciicheck      # Запрещает не-ASCII символы в именах переменных и функций.
    - bidichk         # Ищет опасные последовательности unicode-символов.
    - bodyclose       # Проверяет, что вы не забыли закрыть тело HTTP-ответа (resp.Body.Close()).
    - canonicalheader # Проверяет правильное форматирование HTTP-заголовков.
    - copyloopvar     # Находит, когда переменная цикла копируется по ссылке (частая ошибка в Go).
    - cyclop          # Проверяет цикломатическую сложность (насколько код запутанный).
    - dupl            # Находит дублирующийся код.
    - durationcheck   # Запрещает бессмысленное умножение двух переменных типа `time.Duration`.
    - embeddedstructfieldcheck # Проверяет встраиваемые структуры.
    - errcheck        # **Очень важный!** Проверяет, что вы не игнорируете возвращаемые ошибки.
    - errname         # Проверяет, что имена переменных-ошибок следуют конвенции (например, `ErrNotFound`).
    - errorlint       # Находит проблемы, связанные с оборачиванием ошибок (error wrapping).
    - exhaustive      # Проверяет полноту `switch`-конструкций для перечислений (enum).
    - exptostd        # Предлагает заменить функции из `golang.org/x/exp` на аналоги из стандартной библиотеки.
    - fatcontext      # Находит передачу контекста в циклах, что может быть неэффективно.
    - funcorder       # Проверяет порядок функций в файле.
    - funlen          # Проверяет, что функции не слишком длинные.
    - gocheckcompilerdirectives # Проверяет правильность директив компилятора (`//go:...`).
    - gochecknoglobals # Запрещает использование глобальных переменных.
    - gochecknoinits  # Запрещает использование функций `init()`.
    - gochecksumtype  # Проверяет "sum types".
    - gocognit        # Проверяет когнитивную сложность (насколько функцию легко понять).
    - goconst         # Находит строки, которые повторяются и могут быть вынесены в константы.
    - gocritic        # Большой набор проверок стиля, производительности и багов.
    - gocyclo         # Еще один инструмент для проверки цикломатической сложности.
    - godot           # Проверяет, что комментарии заканчиваются точкой.
    - gomoddirectives # Управляет директивами `replace`, `retract` в `go.mod`.
    - goprintffuncname # Проверяет, что Printf-подобные функции заканчиваются на 'f'.
    - govet           # **Очень важный!** Стандартный анализатор от Go, ищет подозрительные конструкции.
    - iface           # Проверяет некорректное использование интерфейсов.
    - ineffassign     # Находит переменные, которым присвоили значение, но потом не использовали.
    - intrange        # Находит циклы, которые можно упростить.
    - loggercheck     # Проверяет правильность использования популярных библиотек логирования.
    - makezero        # Находит создание слайсов с ненулевой длиной, когда можно было использовать nil.
    - mirror          # Находит неэффективное использование `bytes` и `strings`.
    - mnd             # Ищет "магические числа" (числа без объяснения, которые лучше вынести в константы).
    - musttag         # Требует наличия тегов (например, `json:"..."`) у полей структур.
    - nakedret        # Запрещает "голые" возвраты (naked returns).
    - nestif          # Находит слишком глубоко вложенные `if`-конструкции.
    - nilerr          # Находит код, который возвращает `nil` в качестве ошибки, даже если ошибка была.
    - nilnesserr      # Находит проблемы с проверкой на `nil`.
    - nilnil          # Проверяет, что функция не возвращает одновременно `nil` и невалидное значение.
    - noctx           # Находит HTTP-запросы без `context.Context`.
    - nolintlint      # Проверяет правильность использования комментариев `//nolint`.
    - nonamedreturns  # Запрещает именованные возвращаемые значения.
    - nosprintfhostport # Проверяет неправильное использование `Sprintf` для создания URL.
    - perfsprint      # Предлагает заменить `fmt.Sprintf` на более быстрые альтернативы.
    - predeclared     # Находит переменные, которые "затеняют" встроенные идентификаторы Go (например, `type`, `len`).
    - promlinter      # Проверяет именование метрик Prometheus.
    - protogetter     # Проверяет использование getter-ов для protobuf-сообщений.
    - reassign        # Запрещает переприсваивание переменных пакета.
    - recvcheck       # Проверяет консистентность receiver-ов методов.
    - rowserrcheck    # Проверяет, что вы обрабатываете ошибку `rows.Err()` при работе с базой данных.
    - sloglint        # Проверяет стиль кода при использовании стандартного логгера `slog`.
    - spancheck       # Проверяет ошибки при работе с трейсингом (OpenTelemetry).
    - sqlclosecheck   # Проверяет, что вы закрываете `sql.Rows` и `sql.Stmt`.
    - staticcheck     # **Очень важный!** "govet на стероидах", огромный набор статических проверок.
    - testableexamples # Проверяет, что примеры в документации являются тестируемыми.
    - testifylint     # Проверяет правильность использования библиотеки `testify`.
    - testpackage     # Требует, чтобы тесты находились в отдельном `_test` пакете.
    - tparallel       # Находит неправильное использование `t.Parallel()` в тестах.
    - unconvert       # Удаляет ненужные преобразования типов.
    - unparam         # Находит неиспользуемые параметры функций.
    - unused          # **Важный!** Находит весь неиспользуемый код (переменные, функции, типы).
    - usestdlibvars   # Предлагает использовать переменные/константы из стандартной библиотеки.
    - usetesting      # Проверяет использование пакета `testing`.
    - wastedassign    # Находит "потраченные впустую" присваивания.
    - whitespace      # Находит лишние пробелы.

# Тонкая настройка для уже включенных линтеров.
linters-settings:
  errcheck:
    # Включает проверку ошибок при преобразовании типов (type assertion).
    # Например, в `val, ok := i.(MyType)` он будет требовать проверки переменной `ok`.
    check-type-assertions: true
  govet:
    # Включает все внутренние проверки самого govet.
    enable-all: true
    # Но отключает проверку 'fieldalignment', которая требует упорядочивать поля
    # в структурах для экономии памяти. Это часто считается преждевременной оптимизацией.
    disable:
      - fieldalignment
  staticcheck:
    # Включает все проверки из пакета staticcheck.
    checks:
      - "all"